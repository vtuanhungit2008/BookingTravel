generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Profile {
  id                   String                @id @default(uuid())
  clerkId              String                @unique
  firstName            String
  lastName             String
  username             String
  email                String
  profileImage         String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  loyaltyPoints        Int                   @default(0)
  ownedVouchers        Voucher[]             @relation("UserVouchers")
  properties           Property[]
  favorites            Favorite[]
  reviews              Review[]
  bookings             Booking[]
  savedRecommendations SavedRecommendation[]
  viewHistories        ViewHistory[]
  spinHistories        SpinHistory[]
}

model Guest {
  id        String    @id @default(uuid())
  fullName  String
  email     String
  phone     String
  createdAt DateTime  @default(now())
  bookings  Booking[]
}

model Property {
  id                   String                @id @default(uuid())
  name                 String
  tagline              String
  category             String
  image                String
  country              String
  description          String
  price                Int
  guests               Int
  bedrooms             Int
  beds                 Int
  baths                Int
  amenities            String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  profileId            String
  profile              Profile               @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  favorites            Favorite[]
  reviews              Review[]
  bookings             Booking[]
  savedRecommendations SavedRecommendation[]
  viewHistories        ViewHistory[]
}

model Favorite {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profileId  String
  propertyId String
  profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Review {
  id         String   @id @default(uuid())
  profileId  String
  propertyId String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Voucher {
  id        String      @id @default(uuid())
  code      String      @unique
  discount  Int
  type      VoucherType @default(FIXED)
  expiresAt DateTime
  createdAt DateTime    @default(now())
  owners    Profile[]   @relation("UserVouchers")
  usedBy    Booking[]
}

model Booking {
  id            String   @id @default(uuid())
  profileId     String?
  propertyId    String
  orderTotal    Int
  totalNights   Int
  checkIn       DateTime
  checkOut      DateTime
  paymentStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  roomType      RoomType @default(STANDARD)
  guestId       String?
  voucherId     String?
  discount      Int      @default(0)
  finalPaid     Int?
  profile       Profile? @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  guest         Guest?   @relation(fields: [guestId], references: [id], onDelete: Cascade)
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  voucher       Voucher? @relation(fields: [voucherId], references: [id], onDelete: SetNull)
  qrCode        QRCode?
}

model QRCode {
  id        String    @id @default(uuid())
  code      String    @unique
  scanned   Boolean   @default(false)
  scannedAt DateTime?
  bookingId String    @unique
  createdAt DateTime  @default(now())
  booking   Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model SavedRecommendation {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  profileId  String
  propertyId String
  profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([profileId, propertyId])
}

model ViewHistory {
  id         String   @id @default(uuid())
  profileId  String
  propertyId String
  viewedAt   DateTime @default(now())
  profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([profileId, propertyId, viewedAt])
  @@index([profileId, viewedAt])
}

model SpinHistory {
  id        String   @id @default(uuid())
  profileId String
  date      DateTime @default(now())
  reward    String
  profile   Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)

  @@unique([profileId, date])
}

model Announcement {
  id        String           @id @default(uuid())
  title     String
  content   String
  type      AnnouncementType @default(INFO)
  visible   Boolean          @default(true)
  createdAt DateTime         @default(now())
}

model UserVouchers {
  A String
  B String

  @@unique([A, B], map: "_UserVouchers_AB_unique")
  @@index([B], map: "_UserVouchers_B_index")
  @@map("_UserVouchers")
}

enum RoomType {
  STANDARD
  VIP
  PRESIDENT
}

enum VoucherType {
  FIXED
  PERCENT
}

enum AnnouncementType {
  INFO
  PROMOTION
  URGENT
  UPDATE
}
