datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id                   String                @id @default(uuid())
  clerkId              String                @unique
  firstName            String
  lastName             String
  username             String
  email                String
  profileImage         String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  properties           Property[]
  favorites            Favorite[]
  reviews              Review[]
  bookings             Booking[]
  savedRecommendations SavedRecommendation[]
  viewHistories        ViewHistory[]         // ðŸ‘ˆ Quan há»‡ ngÆ°á»£c tá»« ViewHistory
}

model Property {
  id                   String                @id @default(uuid())
  name                 String
  tagline              String
  category             String
  image                String
  country              String
  description          String
  price                Int
  guests               Int
  bedrooms             Int
  beds                 Int
  baths                Int
  amenities            String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  profile              Profile               @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId            String

  favorites            Favorite[]
  reviews              Review[]
  bookings             Booking[]
  savedRecommendations SavedRecommendation[]
  viewHistories        ViewHistory[]         // ðŸ‘ˆ Quan há»‡ ngÆ°á»£c tá»« ViewHistory
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String

  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
}

model Review {
  id         String   @id @default(uuid())
  profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId  String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Booking {
  id            String   @id @default(uuid())
  profile       Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId     String
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId    String
  orderTotal    Int
  totalNights   Int
  checkIn       DateTime
  checkOut      DateTime
  paymentStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SavedRecommendation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  profile   Profile @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String

  property  Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String

  @@unique([profileId, propertyId]) // KhÃ´ng cho lÆ°u trÃ¹ng gá»£i Ã½
}

model ViewHistory {
  id         String   @id @default(uuid())
  profileId  String
  propertyId String
  viewedAt   DateTime @default(now())

  profile   Profile   @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  property  Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([profileId, viewedAt])
  @@unique([profileId, propertyId, viewedAt]) // trÃ¡nh ghi trÃ¹ng quÃ¡ sÃ¡t
}
