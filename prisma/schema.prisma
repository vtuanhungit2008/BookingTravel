  datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
  }

  generator client {
    provider = "prisma-client-js"
  }

  enum RoomType {
    STANDARD
    VIP
    PRESIDENT
  }

  enum VoucherType {
    FIXED
    PERCENT
  }

  model Profile {
    id                   String                @id @default(uuid())
    clerkId              String                @unique
    firstName            String
    lastName             String
    username             String
    email                String
    profileImage         String
    loyaltyPoints        Int                   @default(0)
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt

    properties           Property[]
    favorites            Favorite[]
    reviews              Review[]
    bookings             Booking[]
    savedRecommendations SavedRecommendation[]
    viewHistories        ViewHistory[]
    spinHistories        SpinHistory[]  // ✅ Quan hệ ngược từ SpinHistory
  }

  model Guest {
    id        String   @id @default(uuid())
    fullName  String
    email     String
    phone     String
    createdAt DateTime @default(now())

    bookings  Booking[]
  }

  model Property {
    id                   String                @id @default(uuid())
    name                 String
    tagline              String
    category             String
    image                String
    country              String
    description          String
    price                Int
    guests               Int
    bedrooms             Int
    beds                 Int
    baths                Int
    amenities            String
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt

    profile              Profile               @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
    profileId            String

    favorites            Favorite[]
    reviews              Review[]
    bookings             Booking[]
    savedRecommendations SavedRecommendation[]
    viewHistories        ViewHistory[]
  }

  model Favorite {
    id         String   @id @default(uuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
    profileId  String

    property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyId String
  }

  model Review {
    id         String   @id @default(uuid())
    profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
    profileId  String
    property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyId String
    rating     Int
    comment    String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
  }

  model Voucher {
    id         String      @id @default(uuid())
    code       String      @unique
    discount   Int
    type       VoucherType @default(FIXED)
    expiresAt  DateTime
    createdAt  DateTime    @default(now())

    usedBy     Booking[]
  }

  model Booking {
    id            String     @id @default(uuid())
    profile       Profile?   @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
    profileId     String?

    discount      Int        @default(0)
    finalPaid     Int?  
    guest         Guest?     @relation(fields: [guestId], references: [id], onDelete: Cascade)
    guestId       String?

    property      Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyId    String

    voucher       Voucher?   @relation(fields: [voucherId], references: [id], onDelete: SetNull)
    voucherId     String?

    orderTotal    Int
    totalNights   Int
    checkIn       DateTime
    checkOut      DateTime
    paymentStatus Boolean    @default(false)
    roomType      RoomType   @default(STANDARD)

    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt

    qrCode        QRCode?    // Quan hệ 1-1
  }

  model QRCode {
    id         String   @id @default(uuid())
    code       String   @unique
    scanned    Boolean  @default(false)
    scannedAt  DateTime?

    bookingId  String   @unique
    booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

    createdAt  DateTime @default(now())
  }

  model SavedRecommendation {
    id         String   @id @default(uuid())
    createdAt  DateTime @default(now())

    profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
    profileId  String

    property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyId String

    @@unique([profileId, propertyId])
  }

  model ViewHistory {
    id         String   @id @default(uuid())
    profileId  String
    propertyId String
    viewedAt   DateTime @default(now())

    profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
    property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

    @@index([profileId, viewedAt])
    @@unique([profileId, propertyId, viewedAt])
  }

  model SpinHistory {
    id        String   @id @default(uuid())
    profileId String
    date      DateTime @default(now())
    reward    String

    profile   Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)

    @@unique([profileId, date])
  }
