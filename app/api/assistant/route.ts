// app/api/assistant/route.ts
import { OpenAI } from 'openai';
import { NextRequest, NextResponse } from 'next/server';
import db from '@/utils/db';

const openai = new OpenAI({
  apiKey: process.env.OPENROUTER_API_KEY!,
  baseURL: 'https://openrouter.ai/api/v1',
});

// Format danh s√°ch ch·ªó ·ªü
const formatProperties = (properties: any[]) => {
  return properties
    .map((prop) => `
üè° ${prop.name}
${prop.tagline}
- Qu·ªëc gia: ${prop.country}
- Lo·∫°i: ${prop.category}
- Gi√°: $${prop.price}/ƒë√™m
- S·ª©c ch·ª©a: ${prop.guests} kh√°ch, ${prop.bedrooms} ph√≤ng ng·ªß, ${prop.beds} gi∆∞·ªùng, ${prop.baths} ph√≤ng t·∫Øm
üîó [Xem chi ti·∫øt](http://localhost:3000/properties/${prop.id})
`)
    .join('\n');
};

export async function POST(req: NextRequest) {
  try {
    const { message } = await req.json();
    const userMessage = message.toLowerCase();

    const properties = await db.property.findMany({
      take: 10,
      orderBy: { createdAt: 'desc' },
    });

    // L·ªçc s∆° b·ªô n·∫øu c√≥ t·ª´ kh√≥a ƒë∆°n gi·∫£n
    const filtered = properties.filter((p) => {
      return (
        (userMessage.includes('vi·ªát nam') && p.country.toLowerCase().includes('vietnam')) ||
        (userMessage.includes('gi√° r·∫ª') && p.price < 500) ||
        (userMessage.includes('nhi·ªÅu ng∆∞·ªùi') && p.guests >= 4)
      );
    });

    const systemPrompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n t∆∞ v·∫•n ch·ªó ·ªü. Ng∆∞·ªùi d√πng c√≥ th·ªÉ h·ªèi v·ªÅ m·ª©c gi√°, s·ªë ng∆∞·ªùi, qu·ªëc gia ho·∫∑c m√¥ t·∫£ nhu c·∫ßu. H√£y g·ª£i √Ω 3-5 ch·ªó ph√π h·ª£p nh·∫•t t·ª´ danh s√°ch d∆∞·ªõi ƒë√¢y, ƒë√≠nh k√®m [Xem chi ti·∫øt].

${formatProperties(filtered.length ? filtered : properties)}
`;

    const chat = await openai.chat.completions.create({
      model: 'openai/gpt-3.5-turbo', // Ho·∫∑c gpt-4, mistral
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: message },
      ],
    });

    return NextResponse.json({ reply: chat.choices[0].message.content });
  } catch (err) {
    console.error('[Assistant Error]', err);
    return NextResponse.json({ error: 'L·ªói server' }, { status: 500 });
  }
}
