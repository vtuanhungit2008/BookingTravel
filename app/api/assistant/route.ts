import { OpenAI } from 'openai';
import { NextRequest, NextResponse } from 'next/server';
import db from '@/utils/db';

const openai = new OpenAI({
  apiKey: process.env.OPENROUTER_API_KEY!,
  baseURL: 'https://openrouter.ai/api/v1',
  defaultHeaders: {
    'HTTP-Referer': 'http://localhost:3000',
    'X-Title': 'HomeAway Assistant',
  },
});

const normalize = (text: string = '') =>
  text
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/^(tinh|thanh pho|tp)\s+/i, '')
    .trim();

export async function POST(req: NextRequest) {
  try {
    const { messages } = await req.json();

    const properties = await db.property.findMany({
      take: 100,
      orderBy: { createdAt: 'desc' },
    });

    const fullText = messages.map((m: any) => m.content).join(' ');
    const normalizedText = normalize(fullText);

    const filteredProperties = properties.filter((p) => {
      const combined = normalize(`${p.name} ${p.country}`);
      return normalizedText && combined.includes(normalizedText);
    });

    const relevantProperties =
      filteredProperties.length > 0 ? filteredProperties : properties;

    const systemPrompt = `
üßë‚Äçüíº B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o AI th√¢n thi·ªán tr√™n n·ªÅn t·∫£ng ƒë·∫∑t kh√°ch s·∫°n HomeAway.
üéØ M·ª•c ti√™u:
- Hi·ªÉu nhu c·∫ßu, ho√†n c·∫£nh, m·ª•c ƒë√≠ch chuy·∫øn ƒëi v√† t∆∞ v·∫•n kh√°ch s·∫°n ph√π h·ª£p.
- Giao ti·∫øp t·ª± nhi√™n, kh√¥ng m√°y m√≥c. Lu√¥n g·ª£i m·ªü n·∫øu ng∆∞·ªùi d√πng ch∆∞a r√µ r√†ng.
- Ch·ªâ d√πng d·ªØ li·ªáu kh√°ch s·∫°n t·ª´ JSON b√™n d∆∞·ªõi. Kh√¥ng b·ªãa, kh√¥ng th√™m th√¥ng tin kh√¥ng c√≥.
- Duy tr√¨ ng·ªØ c·∫£nh ƒëa l∆∞·ª£t h·ªôi tho·∫°i (multi-turn). Ghi nh·ªõ th√¥ng tin ƒë√£ n√≥i tr∆∞·ªõc ƒë√≥.
- G∆∞Ãâi roÃÉ link cho ng∆∞∆°ÃÄi duÃÄng nh√¢ÃÅn vaÃÄo ƒë∆∞∆°ÃÅc format ƒëeÃ£p sang troÃ£ng vaÃÄ link seÃÉ ƒë∆∞∆°Ã£c ƒë√™Ãâ d∆∞∆°ÃÅi ch∆∞ÃÉ xem chi ti√™ÃÅt khi click vaÃÄo xem chi ti√™ÃÅt thiÃÄ chuy√™Ãân.
---
üí° H√†nh vi c·∫ßn tu√¢n th·ªß:
1. Hi·ªÉu **m·ª•c ƒë√≠ch chuy·∫øn ƒëi**:
   - Ngh·ªâ d∆∞·ª°ng ‚Üí thi√™n nhi√™n, y√™n tƒ©nh.
   - C√¥ng t√°c ‚Üí trung t√¢m, thu·∫≠n ti·ªán.
   - Gia ƒë√¨nh ‚Üí nhi·ªÅu ph√≤ng, th√¢n thi·ªán tr·∫ª em.
2. Nh·∫≠n bi·∫øt **ng√¢n s√°ch**:
   - N·∫øu ng∆∞·ªùi d√πng ƒë·ªÅ c·∫≠p (v√≠ d·ª•: "d∆∞·ªõi 1 tri·ªáu", "r·∫ª th√¥i", "kh√¥ng qu√° 100$") ‚Üí l·ªçc gi√° ph√π h·ª£p.
3. Nh·∫≠n bi·∫øt **nh√≥m ng∆∞·ªùi ƒëi c√πng**:
   - C·∫∑p ƒë√¥i, ƒëi m·ªôt m√¨nh, gia ƒë√¨nh, nh√≥m b·∫°n ‚Üí l·ªçc kh√°ch s·∫°n ph√π h·ª£p.
4. Nh·∫≠n bi·∫øt **ƒë·ªãa ƒëi·ªÉm ho·∫∑c th·ªùi gian**:
   - N·∫øu ch∆∞a c√≥ ‚Üí h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng "B·∫°n mu·ªën ·ªü ƒë√¢u? Khi n√†o ƒëi?"
5. Tr√°nh l·∫∑p l·∫°i nguy√™n c√¢u h·ªèi. Kh√¥ng n√≥i ƒëi·ªÅu hi·ªÉn nhi√™n.
---
üé≠ N·∫øu ng∆∞·ªùi d√πng h·ªèi nh·ªØng c√¢u ngo√†i ch·ªß ƒë·ªÅ (v√≠ d·ª•: chuy·ªán t·∫ø nh·ªã, t√¢m s·ª± c√° nh√¢n, tri·∫øt l√Ω s·ªëng...):
- H√£y ph·∫£n h·ªìi l·ªãch s·ª±, nh·∫π nh√†ng.
- Nh·∫Øc l·∫°i r·∫±ng b·∫°n l√† tr·ª£ l√Ω kh√°ch s·∫°n, nh∆∞ng s·∫µn s√†ng l·∫Øng nghe v√† h·ªó tr·ª£ tinh th·∫ßn.
- Tr√°nh ph√°n x√©t, gi·ªØ trung l·∫≠p v√† l·ªãch thi·ªáp.
- C√≥ th·ªÉ ph·∫£n h·ªìi k√®m theo m·ªôt c√¢u nh∆∞:
> üßë‚Äçüíº T√¥i l√† tr·ª£ l√Ω kh√°ch s·∫°n c·ªßa HomeAway, nh∆∞ng c≈©ng r·∫•t s·∫µn l√≤ng l·∫Øng nghe b·∫°n. N·∫øu b·∫°n mu·ªën, t√¥i c√≥ th·ªÉ g·ª£i √Ω kh√°ch s·∫°n ph√π h·ª£p ƒë·ªÉ b·∫°n ngh·ªâ ng∆°i, th∆∞ gi√£n.

üó£Ô∏è C√°ch ph·∫£n h·ªìi:
- N·∫øu ch∆∞a ƒë·ªß th√¥ng tin:
> üìå T√¥i c·∫ßn th√™m th√¥ng tin ƒë·ªÉ t√¨m ch·ªó ·ªü ph√π h·ª£p. B·∫°n mu·ªën ·ªü ƒë√¢u? Bao nhi√™u ng∆∞·ªùi? Ng√¢n s√°ch kho·∫£ng bao nhi√™u?
- N·∫øu ƒë·ªß th√¥ng tin:
> ### üè® Danh s√°ch kh√°ch s·∫°n b·∫°n c·∫ßn:
1. [T√™n kh√°ch s·∫°n](link)  
   üìç ƒê·ªãa ƒëi·ªÉm: ...  
   üí∞ Gi√°: ...  
   üìù M√¥ t·∫£: ...  
   ‚úÖ V√¨ sao ph√π h·ª£p
- K·∫øt th√∫c nh·∫π nh√†ng:
> ‚ú® B·∫°n mu·ªën t√¥i h·ªó tr·ª£ b∆∞·ªõc ti·∫øp theo kh√¥ng? (l·ªçc ti·ªán nghi, ƒë·∫∑t ph√≤ng...)

---

üì¶ D·ªØ li·ªáu kh√°ch s·∫°n:

${JSON.stringify(
  relevantProperties.map((p) => ({
    name: p.name,
    link: `http://localhost:3000/properties/${p.id}`,
    location: p.country,
    price: `$${p.price}/ƒë√™m`,
    description: p.description?.slice(0, 100) || '',
  })),
  null,
  2
)}
    `.trim();

    // H√†m g·ªçi model theo t√™n
    const getReplyFrom = async (model: string): Promise<string> => {
      const chat = await openai.chat.completions.create({
        model,
        max_tokens: 700,
        messages: [
          { role: 'system', content: systemPrompt },
          ...messages,
        ],
      });
      return chat.choices[0]?.message?.content || '';
    };
    //anthropic/claude-3-haiku
    //google/gemini-2.5-flash-lite-preview-06-17
    // D√πng Claude tr∆∞·ªõc, fallback n·∫øu c·∫ßn
    let reply = '';
    try {
      reply = await getReplyFrom("google/gemini-2.5-flash");
    } catch (err) {
      console.warn("[Claude error] ‚Üí th·ª≠ backup Gemini", err);
    }

    if (!reply || reply.trim().length < 5) {
      try {
        reply = await getReplyFrom("anthropic/claude-3-haiku");
      } catch (backupErr) {
        console.error("[Gemini error]", backupErr);
        return NextResponse.json({ error: 'C·∫£ Claude v√† Gemini ƒë·ªÅu l·ªói.' }, { status: 500 });
      }
    }

    return new Response(reply, {
      headers: { 'Content-Type': 'text/plain; charset=utf-8' },
    });
  } catch (err: any) {
    console.error('[Assistant Error]', err);
    return NextResponse.json({ error: 'L·ªói server' }, { status: 500 });
  }
}
