import { NextRequest, NextResponse } from 'next/server';
import db from '@/utils/db';
import { writeFile } from 'fs/promises';
import path from 'path';
import crypto from 'crypto';
import sharp from 'sharp';

// === C·∫•u h√¨nh ng∆∞·ª°ng cho ·∫£nh "qu√° kh√°c bi·ªát" ===
const MAX_SCORE = 500000;

// === H√†m vector h√≥a ·∫£nh, h·ªó tr·ª£ c·∫£ URL v√† local file ===
async function getImageVectorFromAnySource(source: string): Promise<number[]> {
  let imageBuffer: Buffer;

  if (source.startsWith('http')) {
    const response = await fetch(source);
    if (!response.ok) throw new Error('Cannot fetch image from URL');
    const arrayBuffer = await response.arrayBuffer();
    imageBuffer = Buffer.from(arrayBuffer);
  } else {
    imageBuffer = await sharp(source).toBuffer();
  }

  const vector = await sharp(imageBuffer)
    .resize(32, 32)
    .grayscale()
    .raw()
    .toBuffer();

  return Array.from(vector);
}

// === T√≠nh ƒëi·ªÉm gi·ªëng nhau gi·ªØa 2 ·∫£nh (Euclidean distance) ===
function calculateSimilarity(vecA: number[], vecB: number[]): number {
  let sum = 0;
  for (let i = 0; i < vecA.length; i++) {
    const diff = vecA[i] - vecB[i];
    sum += diff * diff;
  }
  return sum;
}

export async function POST(req: NextRequest) {
  const formData = await req.formData();
  const file = formData.get('image') as File;

  if (!file) {
    return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });
  }

  // === L∆∞u ·∫£nh ng∆∞·ªùi d√πng v√†o th∆∞ m·ª•c t·∫°m ===
  const bytes = await file.arrayBuffer();
  const buffer = Buffer.from(bytes);
  const filename = crypto.randomUUID() + path.extname(file.name);
  const uploadPath = path.join(process.cwd(), 'public/uploads', filename);
  await writeFile(uploadPath, buffer);

  // === Vector h√≥a ·∫£nh ng∆∞·ªùi d√πng ===
  let userVector: number[];
  try {
    userVector = await getImageVectorFromAnySource(uploadPath);
  } catch {
    return NextResponse.json({ error: 'Failed to process uploaded image' }, { status: 500 });
  }

  // === Truy v·∫•n t·∫•t c·∫£ ph√≤ng t·ª´ DB ===
  const properties = await db.property.findMany();
  const scored = [];

  for (const prop of properties) {
    try {
      const propVector = await getImageVectorFromAnySource(prop.image);
      const score = calculateSimilarity(userVector, propVector);
      scored.push({ prop, score });
    } catch (err) {
      console.warn(`‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh ph√≤ng: ${prop.name} (${prop.image})`);
    }
  }

  // === T√¨m top 3 ph√≤ng gi·ªëng nh·∫•t ===
  const topMatches = scored
    .sort((a, b) => a.score - b.score)
    .slice(0, 3);

  const isTooDifferent = topMatches.every(item => item.score > MAX_SCORE);

  // === Tr·∫£ v·ªÅ g·ª£i √Ω ph√π h·ª£p ho·∫∑c th√¥ng b√°o ·∫£nh qu√° kh√°c bi·ªát ===
  const recommendations = isTooDifferent
    ? [
        `üôÅ Kh√¥ng t√¨m th·∫•y ph√≤ng ph√π h·ª£p. ·∫¢nh b·∫°n t·∫£i l√™n c√≥ th·ªÉ kh√¥ng li√™n quan ƒë·∫øn n·ªôi th·∫•t ho·∫∑c kh√°ch s·∫°n. Vui l√≤ng th·ª≠ ·∫£nh kh√°c.`
      ]
    : topMatches.map(({ prop }) => `
### üè° G·ª£i √Ω ph√π h·ª£p:
**${prop.name}** - ${prop.country}

![·∫¢nh ph√≤ng](${prop.image})

üí∞ Gi√°: $${prop.price} / ƒë√™m  
üë• S·ª©c ch·ª©a: ${prop.guests} ng∆∞·ªùi  
üîó [Xem chi ti·∫øt](http://localhost:3000/properties/${prop.id})
  `);

  return NextResponse.json({ recommendations });
}
